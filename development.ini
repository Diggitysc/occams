;
; development.ini
;
; Master OCCAMS configuration
;
; Assumed global variables:
;   __file__: the current file
;   here: the current directory of this config file
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; APP CONFIGURATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[app:main]
use = egg:occams

filter-with = who

; Pyramid settings
; http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/environment.html
pyramid.reload_templates = true
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en

; Pyramid plug-ins (loaded first)
pyramid.includes =
    pyramid_debugtoolbar

; Debug toolbar settings
; http://docs.pylonsproject.org/projects/pyramid-debugtoolbar/en/latest/#settings
; IP address filters for which users can see the debugtoolbar
debugtoolbar.hosts = 127.0.0.1 ::1

; redis (for regular access)
redis.url = redis://localhost:6379/0

; Web Assets
; https://github.com/sontek/pyramid_webassets#configuration
webassets.debug = true
webassets.auto_build = true

; Authentication
; http://docs.pylonsproject.org/projects/pyramid_who/en/latest/#configuration-options
who.config_file = %(__file__)s
who.identifier_id = plugins:auth_tkt

; Browser sessions
; http://pyramid-redis-sessions.readthedocs.org/en/latest/gettingstarted.html#configuration
;; Share redis server while avoiding collisions with a prefix
redis.sessions.url = %(redis.url)s
; NOTE: Keep authorization and session secrets separate for security purposes
redis.sessions.secret = sekrit
; Useful if multiple applications are using the same redis database
redis.sessions.prefix = occams-session:
; *WARNING* Also update repoze.who timeout with this value
redis.sessions.timeout = 36000

; OCCAMS applications/plug-ins (loaded after pyramid.includes)
occams.apps =
  occams_datastore
  occams_accounts
  occams_forms
  occams_studies
  occams_roster
;  occams_lims

; Organization token (pirc, cctg, mhealth, etc.)
occams.org.name = myorg

; Organization human-readble title (PIRC, CCTG, mHealth, etc)
occams.org.title = My Organization

; SQLAlchemy URL to the primary application database
occams.db.url = postgresql://user:pass@/myorg

; Permissions group mappings (LDAP -> OCCAMS format)
occams.groups =
;     myorg-group = group
;     myorg-site-group = site:group

; Directory where BLOB files will reside
studies.blob.dir = %(here)s/../var/blobs/

; Directory where export files are stored
studies.export.dir = %(here)s/../var/exports/

; Blame-user for exports
studies.export.user = celery@localhost

; Number of exports a user is allowed to have (blank = infinite)
;studies.export.limit =

; Number of days a user is allowed to keep an export archive (blank = infinite)
;studies.export.expire =

; Comununiation between worker and web application [REQUIRED]
studies.celery.broker.url = %(redis.url)s

; Status of jobs will be stored here [REQUIRED]
studies.celery.backend.url = %(redis.url)s

; PID plugin module
studies.pid.package = occams.roster

; PID SQLAlchemy URL
roster.db.url = postgresql://user:pass@/roster

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ALEMBIC SETTINGS
;; It's useful to have the database migrations in a common file for reference.
;; This configuration might change in the future if we decide to take
;advantage
;; of alembic's "multiple version directories" in order to keep database
;; migrations project-specific.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[alembic]
script_location = occams_studies:alembic/
blame = bitcore@ucsd.edu
sqlalchemy.url = postgresql://user:pass@/myorg

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; REPOZE WHO MIDDLEWARE
; https://repozewho.readthedocs.org/en/latest/configuration.html#declarative-configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[filter:who]
use = egg:repoze.who#config
config_file = $(__file__)s

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; REPOZE WHO v2 PLUGIN/MIDDLEWARE CONFIGURATIONS
;
; This file is pre-configured for ldap, but you can use whatever v2 plugin.
;
; The LDAP plugin used is ``who_ldap``:
; https://github.com/m-martinez/who_ldap
;
; More options at:
; http://docs.repoze.org/who/2.0/configuration.html#declarative-configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[general]
request_classifier = repoze.who.classifiers:default_request_classifier
challenge_decider = pyramid_who.classifiers:forbidden_challenger
remote_user_key = REMOTE_USER

[identifiers]
plugins =
  auth_tkt

[authenticators]
plugins =
  auth_tkt
  ldapusers

[mdproviders]
plugins =
  ldapproperties
  ldapgroups

[challengers]
plugins =
  redirector;browser

[plugin:redirector]
use = repoze.who.plugins.redirector:make_plugin
login_url = /accounts/login
came_from_param = referrer

[plugin:auth_tkt]
; identification and authentication
use = repoze.who.plugins.auth_tkt:make_plugin
secret = AUTH_SPECIFIC_TOKEN
cookie_name = auth_tkt
; Switch to true on production systems
secure = False
include_ip = True
; *WARNING* Use the same value as pyramid session timeout
timeout = 3600
; Rule of thumb, set to a tenth of the timetout (per pyramid docs)
reissue_time = 360

[plugin:ldapusers]
; authentication
use = who_ldap:LDAPSearchAuthenticatorPlugin
url =
bind_dn =
bind_pass =
base_dn =
naming_attribute =
search_scope = subtree
returned_id = login

[plugin:ldapproperties]
; mdproviders
use = who_ldap:LDAPAttributesPlugin
url =
bind_dn =
bind_pass =
name = properties
attributes = cn=first_name,sn=last_name,mail=email
flatten = True

[plugin:ldapgroups]
; mdproviders
use = who_ldap:LDAPGroupsPlugin
url =
bind_dn =
bind_pass =
base_dn =
name = groups
filterstr = (&(objectClass=groupOfNames)(member=%%(dn)s))
returned_id = cn

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; WSGI SERVER CONFIGURATION
;
; https://gevent-socketio.readthedocs.org/en/latest/server_integration.html#gunicorn
; http://docs.gunicorn.org/en/latest/configure.html#configuration-file
;
; <rant>
; There is absolutely no way to specify custom settings in gunicorn. They must be
; done through the "env" setting, but then, even then, gunicorn cannot process
; multiple "env" settings in a config file. They must be passed in the command line.
;
; If you entend on using the application inside of a virtual path, YOU NEED
; to override the "resource" property via the "env" setting in the command line.
;
; Also, there is no way to use the same file as a logging configuration, so you
; need to rememeber to explicitly set the filename here
; </rant>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[server:main]
use = egg:gunicorn#main
; Had to override gevent-socketio's to access gunicorn's crappy config system
worker_class = occams.sgunicorn.GeventSocketIOWorker
host = 0.0.0.0
port = 3000
errorlog = -
logconfig = %(__file__)ss
loglevel = INFO
; Note, for resource DO NOT ADD beginning slash
; --env resource=studies/socket.io
; --env policy_server=False

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LOGGING CONFIGURATION
; http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[loggers]
keys = root, sqlalchemy, alembic, occams

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_occams]
level = DEBUG
handlers =
qualname = occams

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine
; "level = INFO" logs SQL queries.
; "level = DEBUG" logs SQL queries and results.
; "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s
