;
; production.ini
; Master OCCAMS configuration
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; APPS CONFIGURATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[app:main]
use = egg:occams

filter-with = who

; Pyramid settings
; http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/environment.html
pyramid.reload_templates = false
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en

; Pyramid plug-ins (loaded first)
pyramid.includes =
  pyramid_exclog

exclog.extra_info = true

; redis (for regular access)
redis.url = redis://localhost:6379/0

; webassets
; https://github.com/sontek/pyramid_webassets#configuration
; Debug mode (false = compress)
webassets.debug = false

; Authentication
; http://docs.pylonsproject.org/projects/pyramid_who/en/latest/#configuration-options
who.config_file = %(here)s/who.ini
who.identifier_id = plugins:auth_tkt

; Browser sessions
; Share redis server while avoiding collisions with a prefix
; NOTE: Keep authorization and session secrets separate for security purposes
; http://pyramid-redis-sessions.readthedocs.org/en/latest/gettingstarted.html#configuration
redis.sessions.secret = sekrit
redis.sessions.url = %(redis.url)s
redis.sessions.timeout = 3600
redis.sessions.prefix = occams-sessions:

; External application links JSON configuration file. (Optional)
;suite.file = apps.json

; OCCAMS applications/plug-ins (loaded after pyramid.includes)
occams.apps =
  occams_datastore
  occams_accounts
  occams_forms
  occams_studies
  occams_roster
;  occams_lims

; Organization token (pirc, cctg, mhealth, etc.)
occams.org.name = myorg

; Organization human-readble title (PIRC, CCTG, mHealth, etc)
occams.org.title = My Organization

; SQLAlchemy URL to the primary application database
occams.db.url = postgresql://user:pass@/myorg

; Permissions group mappings (LDAP -> OCCAMS format)
occams.groups =
;     myorg-group = group
;     myorg-site-group = site:group
;
; PID plugin module
studies.pid.package = occams.roster

; PID SQLAlchemy URL
roster.db.url = postgresql://user:pass@/roster

; Directory where BLOB files will reside
studies.blob.dir = %(here)s/../var/blobs/

; Directory where export files are stored
studies.export.dir = %(here)s/../var/exports/

; Blame-user for exports
studies.export.user = celery@localhost

; Number of exports a user is allowed to have (blank = infinite)
;studies.export.limit =

; Number of days a user is allowed to keep an export archive (blank = infinite)
;studies.export.expire =

; Comununiation between worker and web application [REQUIRED]
studies.celery.broker.url = %(redis.url)s

; Status of jobs will be stored here [REQUIRED]
studies.celery.backend.url = %(redis.url)s


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ALEMBIC SETTINGS
;; It's useful to have the database migrations in a common file for reference.
;; This configuration might change in the future if we decide to take
;advantage
;; of alembic's "multiple version directories" in order to keep database
;; migrations project-specific.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[alembic]
script_location = occams_studies:alembic/
blame = bitcore@ucsd.edu
sqlalchemy.url = postgresql://user:pass@/myorg


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; REPOZE WHO MIDDLEWARE
; Common configurations for repoze.who, applications should use this as a
; configuration filter (i.e. "filter-with = who")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[filter:who]
use = egg:repoze.who#config
config_file = %(here)s/who.ini


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; WSGI SERVER CONFIGURATION
;
; https://gevent-socketio.readthedocs.org/en/latest/server_integration.html#gunicorn
;
; <rant>
; There is absolutely no way to specify custom settings in gunicorn. They must be
; done through the "env" setting, but then, even then, gunicorn cannot process
; multiple "env" settings in a config file. They must be passed in the command line.
;
; If you entend on using the application inside of a virtual path, YOU NEED
; to override the "resource" property via the "env" setting in the command line.
;
; Also, there is no way to use the same file as a logging configuration, so you
; need to rememeber to explicitly set the filename here
; </rant>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[server:main]
use = egg:gunicorn#main
; Had to override gevent-socketio's to access gunicorn's crappy config system
worker_class = occams.sgunicorn.GeventSocketIOWorker
host = 0.0.0.0
port = 3000
errorlog = -
logconfig = %(here)s/production.ini
loglevel = WARN
; Note, for resource DO NOT ADD beginning slash
; --env resource=studies/socket.io
; --env policy_server=False


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; LOGGING CONFIGURATION
; http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[loggers]
keys = root, exc_logger, sqlalchemy, alembic, occams, occams_studies, occams_forms, occams_accounts, occams_lims

[handlers]
keys = console, exc_handler

[formatters]
keys = generic, exc_formatter

[logger_root]
level = WARN
handlers = console

[logger_occams]
level = WARN
handlers =
qualname = occams_accounts

[logger_occams_accounts]
level = WARN
handlers =
qualname = occams_accounts

[logger_occams_studies]
level = WARN
handlers =
qualname = occams_studies

[logger_occams_forms]
level = WARN
handlers =
qualname = occams_forms

[logger_occams_lims]
level = WARN
handlers =
qualname = occams_lims

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
; "level = INFO" logs SQL queries.
; "level = DEBUG" logs SQL queries and results.
; "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s

[logger_exc_logger]
level = ERROR
handlers = exc_handler
qualname = exc_logger

[handler_exc_handler]
class = handlers.SMTPHandler
args = (('localhost', 25), 'myorg@localhost', ['bitcore@ucsd.edu'], 'OCCAMS Exception')
level = ERROR
formatter = exc_formatter

[formatter_exc_formatter]
format = %(asctime)s %(message)s
